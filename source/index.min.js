(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={ "height":14,
 "layers":[
        {
         "data":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 10, 10, 10, 10, 12, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 20, 10, 10, 10, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 12, 10, 10, 10, 12, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 17, 10, 10, 10, 18, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         "height":14,
         "name":"background",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "data":[35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 3, 3, 2, 2, 2, 3, 2, 3, 35, 35, 34, 35, 35, 34, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 36, 0, 25, 27, 26, 26, 27, 27, 26, 35, 35, 35, 35, 35, 34, 35, 36, 0, 0, 0, 0, 0, 1, 3, 2, 35, 35, 35, 35, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 34, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 34, 35, 35, 35, 34, 35, 27, 27, 26, 27, 28, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 27, 27, 27, 35, 35, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
         "height":14,
         "name":"collision",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "height":0,
         "name":"entities",
         "objects":[
                {
                 "gid":44,
                 "height":0,
                 "id":4,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":193,
                 "y":162
                }, 
                {
                 "gid":44,
                 "height":0,
                 "id":5,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":225,
                 "y":322
                }, 
                {
                 "gid":44,
                 "height":0,
                 "id":6,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":225,
                 "y":290
                }, 
                {
                 "gid":44,
                 "height":0,
                 "id":7,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":225,
                 "y":259
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":8,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":161.5,
                 "y":226.5
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":9,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":160,
                 "y":291
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":10,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":160,
                 "y":258.5
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":11,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":162,
                 "y":324
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":12,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":259,
                 "y":163
                }, 
                {
                 "gid":55,
                 "height":0,
                 "id":13,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"START",
                 "visible":true,
                 "width":0,
                 "x":320,
                 "y":161
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "width":0,
         "x":0,
         "y":0
        }],
 "nextobjectid":14,
 "orientation":"orthogonal",
 "properties":
    {

    },
 "renderorder":"right-down",
 "tileheight":32,
 "tilesets":[
        {
         "firstgid":1,
         "image":"tiles.png",
         "imageheight":160,
         "imagewidth":256,
         "margin":0,
         "name":"tiles",
         "properties":
            {

            },
         "spacing":0,
         "tileheight":32,
         "tilewidth":32,
         "transparentcolor":"#ffffff"
        }, 
        {
         "firstgid":41,
         "image":"items.png",
         "imageheight":128,
         "imagewidth":128,
         "margin":0,
         "name":"items",
         "properties":
            {

            },
         "spacing":0,
         "tileheight":32,
         "tilewidth":32,
         "transparentcolor":"#ffffff"
        }],
 "tilewidth":32,
 "version":1,
 "width":16
}
},{}],2:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var blocks;
(function (blocks) {
    blocks.sprites;
    var currentPosition = new Phaser.Point(0, 0);
    var nextPosition = new Phaser.Point(0, 0);
    function init(game) {
        blocks.sprites = game.add.group();
        utilities.fillSpriteGroup(blocks.sprites, "BLOCK", "entities", 0, game);
    }
    blocks.init = init;
})(blocks || (blocks = {}));
module.exports = blocks;

},{"../utilities/utilities":10}],3:[function(require,module,exports){
"use strict";
var player = require("../player/player");
var blocks = require("../blocks/blocks");
var fires = require("../fires/fire");
var world = require("../world/tiles");
var solver;
(function (solver) {
    function playerToBlockCollision(player, block) {
        console.log("Player colliding with block", player, block);
        block.body.velocity.x = player.body.velocity.x;
        player.body.velocity.x = 0;
    }
    solver.playerToBlockCollision = playerToBlockCollision;
    ;
    function playerToTargetCollision(player, target) {
        console.log("kill player", player, target);
    }
    solver.playerToTargetCollision = playerToTargetCollision;
    ;
    function debugCollisionHandler(obj1, obj2) {
        console.log("obj1", obj1, ", obj2", obj2);
    }
    solver.debugCollisionHandler = debugCollisionHandler;
    ;
    function resolve(game) {
        game.physics.arcade.collide(player.sprite, world.layers["collision"]);
        game.physics.arcade.collide(player.sprite, fires.sprites, playerToTargetCollision, null, this);
        game.physics.arcade.collide(player.sprite, blocks.sprites, playerToBlockCollision, null, this);
        game.physics.arcade.collide(blocks.sprites, fires.sprites, debugCollisionHandler, null, this);
    }
    solver.resolve = resolve;
})(solver || (solver = {}));
module.exports = solver;

},{"../blocks/blocks":2,"../fires/fire":5,"../player/player":8,"../world/tiles":11}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var fire;
(function (fire) {
    fire.sprites;
    var currentPosition = new Phaser.Point(0, 0);
    var nextPosition = new Phaser.Point(0, 0);
    function init(game) {
        fire.sprites = game.add.group();
        utilities.fillSpriteGroup(fire.sprites, "TARGET", "entities", 3, game);
    }
    fire.init = init;
})(fire || (fire = {}));
module.exports = fire;

},{"../utilities/utilities":10}],6:[function(require,module,exports){
"use strict";
var player = require("../player/player");
var blocks = require("../blocks/blocks");
var fires = require("../fires/fire");
var world = require("../world/tiles");
var constant = require("../utilities/constants");
var collision = require("../collision/solver");
var utilities = require("../utilities/utilities");
var game;
function preloadGame() {
    return function () {
        game.load.tilemap("level", utilities.level("lvl.json"), null, Phaser.Tilemap.TILED_JSON);
        game.load.image("tiles", utilities.image("tiles.png"));
        game.load.spritesheet("player", utilities.image("player-sheet.png"), constant.TileSize.width, constant.TileSize.heigth);
        game.load.spritesheet("items", utilities.image("items-sheet.png"), constant.TileSize.width, constant.TileSize.heigth);
    };
}
function createGame() {
    return function () {
        game.stage.backgroundColor = "#787878";
        game.scale.pageAlignHorizontally = true;
        game.scale.pageAlignVertically = true;
        game.physics.startSystem(Phaser.Physics.ARCADE);
        world.map = game.add.tilemap("level");
        world.map.addTilesetImage("tiles", "tiles");
        world.loadLayers(["collision", "background"]);
        player.init(game);
        blocks.init(game);
        fires.init(game);
    };
}
function updateGame() {
    return function () {
        player.checkInputs(game);
        player.checkStopConditions(game);
        collision.resolve(game);
    };
}
function renderGame() {
    return function () {
    };
}
var gameworld;
(function (gameworld) {
    function init() {
        game = new Phaser.Game(16 * constant.TileSize.width, 14 * constant.TileSize.heigth, Phaser.AUTO, "FIce", {
            preload: preloadGame(),
            create: createGame(),
            update: updateGame(),
            render: renderGame()
        });
    }
    gameworld.init = init;
})(gameworld || (gameworld = {}));
module.exports = gameworld;

},{"../blocks/blocks":2,"../collision/solver":3,"../fires/fire":5,"../player/player":8,"../utilities/constants":9,"../utilities/utilities":10,"../world/tiles":11}],7:[function(require,module,exports){
"use strict";
var gameworld = require("./game/game");
gameworld.init();

},{"./game/game":6}],8:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var constant = require("../utilities/constants");
var world = require("../world/tiles");
var currentPosition = new Phaser.Point(0, 0);
var nextPosition = new Phaser.Point(0, 0);
function falling() {
    var tileX = utilities.getTileXFromWorldCoordinate(player.sprite.body.x);
    var tileY = utilities.getTileYFromWorldCoordinate(player.sprite.body.y + constant.TileSize.heigth);
    if (!world.map.hasTile(tileX, tileY, world.layers["collision"])) {
        player.sprite.body.velocity.y = constant.Velocity;
        console.log("Started falling");
        return true;
    }
    return false;
}
;
function checkMovement(game) {
    if (falling()) {
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
        console.log("Moving left");
        getNextTileWorldCoordinates(-1);
    }
    else if (game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
        console.log("Moving right");
        getNextTileWorldCoordinates(+1);
    }
}
;
function getNextTileWorldCoordinates(velocityDirectionMultiplier) {
    var velocity = constant.Velocity * velocityDirectionMultiplier;
    nextPosition.x = utilities.getTileFlooredXWorldCoordinate(player.sprite.body.x + (constant.TileSize.width * velocityDirectionMultiplier));
    player.sprite.body.velocity.x = velocity;
    console.log("current.x/nextPosition.x", player.sprite.body.x, "/", nextPosition.x, ", nextPosition.y", nextPosition.y, ", velocity:", velocity);
}
;
var player;
(function (player) {
    player.sprite;
    function init(game) {
        var start = utilities.createFromType("START", "entities", utilities.lvlJson);
        if (start.length <= 0) {
            throw "Could not load START entity from given map. Please make sure you have a start defined";
        }
        var x = utilities.getTileFlooredXWorldCoordinate(start[0].x);
        var y = utilities.getTileFlooredYWorldCoordinate(start[0].y);
        player.sprite = game.add.sprite(x, y, "player");
        player.sprite.frame = 5;
        player.sprite.body.collideWorldBounds = true;
        player.sprite.body.setSize(constant.TileSize.width, constant.TileSize.heigth);
        game.physics.enable(player.sprite, Phaser.Physics.ARCADE);
    }
    player.init = init;
    function checkInputs(game) {
        if ((player.sprite.body.velocity.x >= -constant.VelocityTreshold && player.sprite.body.velocity.x <= constant.VelocityTreshold) || (player.sprite.body.velocity.y <= constant.VelocityTreshold)) {
            console.log("velocity.x:", player.sprite.body.velocity.x, ", velocity.y:", player.sprite.body.velocity.y);
            checkMovement(game);
        }
    }
    player.checkInputs = checkInputs;
    ;
    function checkStopConditions(game) {
        var setPlayerToPosition = false;
        if (player.sprite.body.velocity.y > constant.VelocityTreshold) {
            console.log("(F) To position:", player.sprite.body.velocity.x, player.sprite.body.x, nextPosition.x);
        }
        if (player.sprite.body.velocity.x < -constant.VelocityTreshold && player.sprite.body.x <= nextPosition.x) {
            setPlayerToPosition = true;
            console.log("(L) To position:", player.sprite.body.velocity.x, player.sprite.body.x, nextPosition.x);
        }
        if (player.sprite.body.velocity.x > constant.VelocityTreshold && player.sprite.body.x >= nextPosition.x) {
            setPlayerToPosition = true;
            console.log("(R) To position:", player.sprite.body.velocity.x, player.sprite.body.x, nextPosition.x);
        }
        if (setPlayerToPosition) {
            if (!checkMovement(game)) {
                player.sprite.body.x = nextPosition.x;
                player.sprite.body.velocity.x = 0;
            }
        }
    }
    player.checkStopConditions = checkStopConditions;
})(player || (player = {}));
module.exports = player;

},{"../utilities/constants":9,"../utilities/utilities":10,"../world/tiles":11}],9:[function(require,module,exports){
"use strict";
var constants;
(function (constants) {
    var levelsDirectory = "levels/";
    var imagesDirectory = "images/";
    constants.AssetDirectoryPath = "/assets/";
    constants.LevelsAssetDirectory = constants.AssetDirectoryPath + levelsDirectory;
    constants.ImagesAssetDirectory = constants.AssetDirectoryPath + imagesDirectory;
    constants.TileSize = { width: 32, heigth: 32 };
    constants.Velocity = 55;
    constants.VelocityTreshold = 0.1;
})(constants || (constants = {}));
;
module.exports = constants;

},{}],10:[function(require,module,exports){
var constant = require("./constants");
var utilities;
(function (utilities) {
    utilities.lvlJson = require("../../assets/levels/lvl.json");
    function getTileFlooredXWorldCoordinate(x) {
        return Math.floor(x / constant.TileSize.width) * constant.TileSize.width;
    }
    utilities.getTileFlooredXWorldCoordinate = getTileFlooredXWorldCoordinate;
    ;
    function getTileFlooredYWorldCoordinate(y) {
        return Math.floor(y / constant.TileSize.heigth) * constant.TileSize.heigth;
    }
    utilities.getTileFlooredYWorldCoordinate = getTileFlooredYWorldCoordinate;
    ;
    function getTileXFromWorldCoordinate(x) {
        return Math.floor(x / constant.TileSize.width);
    }
    utilities.getTileXFromWorldCoordinate = getTileXFromWorldCoordinate;
    ;
    function getTileYFromWorldCoordinate(y) {
        return Math.floor(y / constant.TileSize.heigth);
    }
    utilities.getTileYFromWorldCoordinate = getTileYFromWorldCoordinate;
    ;
    function image(imageName) {
        return constant.ImagesAssetDirectory + imageName;
    }
    utilities.image = image;
    ;
    function level(levelName) {
        return constant.LevelsAssetDirectory + levelName;
    }
    utilities.level = level;
    ;
    function createSprite(element, group) {
        var sprite = group.create(element.x, element.y, element.properties.sprite);
        Object.keys(element.properties).forEach(function (key) {
            sprite[key] = element.properties[key];
        });
    }
    utilities.createSprite = createSprite;
    ;
    function createFromType(type, layer, tiledMapJson) {
        var results = [];
        tiledMapJson.layers.forEach(function (tmpLayer) {
            if (tmpLayer.name === layer) {
                tmpLayer.objects.forEach(function (object) {
                    if (object.type === type) {
                        object.y -= constant.TileSize.heigth;
                        results.push(object);
                    }
                });
            }
        });
        return results;
    }
    utilities.createFromType = createFromType;
    ;
    function fillSpriteGroup(spriteGroup, type, layer, frame, game) {
        createFromType(type, layer, utilities.lvlJson).forEach(function (obj) {
            var x = utilities.getTileFlooredXWorldCoordinate(obj.x);
            var y = utilities.getTileFlooredYWorldCoordinate(obj.y);
            var sprite = game.add.sprite(x, y, "items");
            game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.frame = frame;
            sprite.body.setSize(constant.TileSize.width, constant.TileSize.heigth);
            spriteGroup.add(sprite);
        });
    }
    utilities.fillSpriteGroup = fillSpriteGroup;
    ;
})(utilities || (utilities = {}));
;
module.exports = utilities;

},{"../../assets/levels/lvl.json":1,"./constants":9}],11:[function(require,module,exports){
"use strict";
var tiles;
(function (tiles) {
    tiles.map;
    tiles.layers = {};
    function loadLayers(layers) {
        if (tiles.map) {
            throw "Map not created.";
        }
        layers.forEach(function (layer) {
            tiles.layers[layer] = tiles.map.createLayer(layer);
            tiles.layers[layer].resizeWorld();
        });
        tiles.map.setCollisionBetween(1, 2000, true, "collision");
    }
    tiles.loadLayers = loadLayers;
    ;
})(tiles || (tiles = {}));
module.exports = tiles;

},{}]},{},[4,7]);
