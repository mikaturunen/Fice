(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={ "height":14,
 "layers":[
        {
         "data":[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
         "height":14,
         "name":"background",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "data":[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],
         "height":14,
         "name":"collision",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "height":0,
         "name":"entities",
         "objects":[
                {
                 "gid":10,
                 "height":0,
                 "id":8,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":160,
                 "y":160.25
                }, 
                {
                 "gid":10,
                 "height":0,
                 "id":9,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":224.333,
                 "y":320.667
                }, 
                {
                 "gid":10,
                 "height":0,
                 "id":10,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":288,
                 "y":352.333
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":11,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":256.333,
                 "y":160.333
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":12,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":162.333,
                 "y":228.667
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":13,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":160.667,
                 "y":266.667
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":14,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":161.333666666667,
                 "y":297.333333333333
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":15,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":160.333,
                 "y":334.333666666667
                }, 
                {
                 "gid":7,
                 "height":0,
                 "id":16,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"START",
                 "visible":true,
                 "width":0,
                 "x":320,
                 "y":160.333
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "width":0,
         "x":0,
         "y":0
        }],
 "nextobjectid":17,
 "orientation":"orthogonal",
 "properties":
    {

    },
 "renderorder":"right-down",
 "tileheight":32,
 "tilesets":[
        {
         "firstgid":1,
         "image":"..\/..\/..\/..\/Tiled\/solomons-key2\/sprites\/physics-debug-colors.png",
         "imageheight":128,
         "imagewidth":128,
         "margin":0,
         "name":"tiles",
         "properties":
            {

            },
         "spacing":0,
         "tileheight":32,
         "tilewidth":32,
         "transparentcolor":"#ffffff"
        }],
 "tilewidth":32,
 "version":1,
 "width":16
}
},{}],2:[function(require,module,exports){
module.exports={ "height":14,
 "layers":[
        {
         "data":[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
         "height":14,
         "name":"background",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "data":[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
         "height":14,
         "name":"collision",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "height":14,
         "name":"entities",
         "objects":[
                {
                 "gid":7,
                 "height":0,
                 "id":1,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"START",
                 "visible":true,
                 "width":0,
                 "x":66,
                 "y":258.5
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":3,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":98.5,
                 "y":259
                }, 
                {
                 "gid":1,
                 "height":0,
                 "id":4,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":161,
                 "y":258
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":5,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":289,
                 "y":193.5
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":6,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":322,
                 "y":194
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":7,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":353.5,
                 "y":194.5
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":8,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":322,
                 "y":227
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":9,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":322,
                 "y":259.5
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":10,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":322.5,
                 "y":291
                }, 
                {
                 "gid":1,
                 "height":0,
                 "id":11,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":355.5,
                 "y":229
                }, 
                {
                 "gid":1,
                 "height":0,
                 "id":12,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":357,
                 "y":258.5
                }, 
                {
                 "gid":1,
                 "height":0,
                 "id":13,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":356,
                 "y":291
                }, 
                {
                 "gid":1,
                 "height":0,
                 "id":14,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"FIRE",
                 "visible":true,
                 "width":0,
                 "x":387,
                 "y":290
                }, 
                {
                 "gid":11,
                 "height":0,
                 "id":15,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"ICE",
                 "visible":true,
                 "width":0,
                 "x":384.5,
                 "y":194
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }],
 "nextobjectid":16,
 "orientation":"orthogonal",
 "properties":
    {

    },
 "renderorder":"right-down",
 "tileheight":32,
 "tilesets":[
        {
         "firstgid":1,
         "image":"..\/..\/..\/..\/Tiled\/solomons-key2\/sprites\/physics-debug-colors.png",
         "imageheight":128,
         "imagewidth":128,
         "margin":0,
         "name":"tiles",
         "properties":
            {

            },
         "spacing":0,
         "tileheight":32,
         "tilewidth":32,
         "transparentcolor":"#ffffff"
        }],
 "tilewidth":32,
 "version":1,
 "width":16
}
},{}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var physics = require("../physics/physics");
var fire;
(function (fire) {
    fire.sprites;
    function init(game) {
        fire.sprites = game.add.group();
        utilities.fillSpriteGroup(fire.sprites, "FIRE", "entities", 8, game);
        console.log("Found", fire.sprites.length, "fires");
        fire.sprites.children.forEach(function (sprite) {
            game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.name = "FIRE";
            sprite.body.tiledType = "FIRE";
            sprite.body.velocity = new Phaser.Point(0, 0);
            sprite.body._uniqueId = utilities.getRunningId();
            sprite.body.next = new Phaser.Point(0, 0);
            sprite.body.previous = new Phaser.Point(0, 0);
            physics.physicsBodies.push(sprite.body);
            sprite.body.isDead = false;
        });
    }
    fire.init = init;
    function update(game) {
        var deadSprites = fire.sprites.children.filter(function (s) { return s.body.isDead === true; });
        fire.sprites.children = fire.sprites.children.filter(function (s) { return s.body.isDead === false; });
        if (deadSprites.length > 0) {
            console.log("Found death fire sprites", deadSprites.length);
            physics.killBodies(deadSprites.map(function (d) { return d.body._uniqueId; }));
        }
    }
    fire.update = update;
})(fire || (fire = {}));
module.exports = fire;

},{"../physics/physics":9,"../utilities/utilities":12}],5:[function(require,module,exports){
"use strict";
var player = require("../player/player");
var ice = require("../ice/ice");
var fires = require("../fires/fire");
var world = require("../world/tiles");
var constant = require("../utilities/constants");
var utilities = require("../utilities/utilities");
var physics = require("../physics/physics");
var game;
function preloadGame() {
    return function () {
        world.loadLevel(game, 1, 2);
        game.load.image("tiles", utilities.image("debug-colors.png"));
        game.load.spritesheet("player", utilities.image("player-sheet.png"), constant.TileSize.width, constant.TileSize.heigth);
        game.load.spritesheet("items", utilities.image("debug-colors.png"), 32, constant.TileSize.heigth);
    };
}
function createGame() {
    return function () {
        game.stage.backgroundColor = "#787878";
        game.scale.pageAlignHorizontally = true;
        game.scale.pageAlignVertically = true;
        world.map = game.add.tilemap("level");
        world.map.addTilesetImage("tiles", "tiles");
        world.loadLayers(["background", "collision"]);
        player.init(game);
        ice.init(game);
        fires.init(game);
    };
}
function updateGame() {
    return function () {
        player.update(game);
        ice.update(game);
        fires.update(game);
        physics.update(game);
    };
}
var renderBodyInfo = function () {
    var body = physics.getBody(game.input.mousePointer.x, game.input.mousePointer.y);
    if (body) {
        var x = Math.round(body.x / 32);
        var y = Math.round(body.y / 32);
        var cx = body.x;
        var cy = body.y;
        var ttype = body.tiledType;
        game.debug.text("ENTITY: " + x + ", " + y + " -- " + body.velocity.x + ", " + body.velocity.y + " -- " + ttype + ", id: " + body._uniqueId, 10, 13 * 32);
    }
};
function renderGame() {
    return function () {
        game.debug.text("Moving bodies  : " + JSON.stringify(physics.currentlyMovingBody !== undefined), 10, 10);
        game.debug.text("Player movement: " + player.sprite.body.velocity.x, 10, 25);
        game.debug.text("Player y       : " + Math.round(player.sprite.body.y) + ",  " + Math.round(player.sprite.body.y / 32), 10, 40);
        game.debug.text("Player x       : " + Math.round(player.sprite.body.x) + ",  " + Math.round(player.sprite.body.x / 32), 10, 55);
        game.debug.text("__bodyUnder: " + player.sprite.body.____isOnTopOfBody, 250, 10);
        game.debug.text("mouse x,y: " + Math.round(game.input.mousePointer.x) + ", " + Math.round(game.input.mousePointer.y), 250, 25);
        renderBodyInfo();
    };
}
var gameworld;
(function (gameworld) {
    function init() {
        game = new Phaser.Game(16 * constant.TileSize.width, 14 * constant.TileSize.heigth, Phaser.AUTO, "FIce", {
            preload: preloadGame(),
            create: createGame(),
            update: updateGame(),
            render: renderGame()
        });
    }
    gameworld.init = init;
})(gameworld || (gameworld = {}));
module.exports = gameworld;

},{"../fires/fire":4,"../ice/ice":6,"../physics/physics":9,"../player/player":10,"../utilities/constants":11,"../utilities/utilities":12,"../world/tiles":13}],6:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var physics = require("../physics/physics");
var currentPosition = new Phaser.Point(0, 0);
var nextPosition = new Phaser.Point(0, 0);
var ice;
(function (ice) {
    ice.sprites;
    function init(game) {
        ice.sprites = game.add.group();
        utilities.fillSpriteGroup(ice.sprites, "ICE", "entities", 0, game);
        ice.sprites.children.forEach(function (sprite) {
            game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.name = "ICE";
            sprite.body.tiledType = "ICE";
            sprite.body.velocity = new Phaser.Point(0, 0);
            sprite.body._uniqueId = utilities.getRunningId();
            sprite.body.next = new Phaser.Point(0, 0);
            sprite.body.previous = new Phaser.Point(0, 0);
            physics.physicsBodies.push(sprite.body);
            sprite.body.isDead = false;
        });
    }
    ice.init = init;
    function update(game) {
        var deadSprites = ice.sprites.children.filter(function (s) { return s.body.isDead === true; });
        ice.sprites.children = ice.sprites.children.filter(function (s) { return s.body.isDead === false; });
        if (deadSprites.length > 0) {
            console.log("Found death ice sprites", deadSprites.length);
            physics.killBodies(deadSprites.map(function (d) { return d.body._uniqueId; }));
        }
    }
    ice.update = update;
})(ice || (ice = {}));
module.exports = ice;

},{"../physics/physics":9,"../utilities/utilities":12}],7:[function(require,module,exports){
"use strict";
var gameworld = require("./game/game");
gameworld.init();

},{"./game/game":5}],8:[function(require,module,exports){
"use strict";
var constant = require("../utilities/constants");
function collisionBody(x, y, velocityX, velocityY, _uniqueId) {
    return {
        tile: {
            x: x,
            y: y
        },
        coordinates: {
            x: x * constant.TileSize.width,
            y: y * constant.TileSize.heigth
        },
        velocity: {
            x: velocityX,
            y: velocityY
        },
        width: constant.TileSize.width,
        heigth: constant.TileSize.heigth,
        _uniqueId: _uniqueId
    };
}
var collision_body;
(function (collision_body) {
    "use strict";
    function fromTile(tile) {
        return collisionBody(tile.x, tile.y, 0, 0, -1);
    }
    collision_body.fromTile = fromTile;
    function fromTiles(tiles) {
        return tiles.map(function (t) { return collisionBody(t.x, t.y, 0, 0, -1); });
    }
    collision_body.fromTiles = fromTiles;
    function fromPhysicsBody(body) {
        return collisionBody(Math.round(body.x / constant.TileSize.width), Math.round(body.y / constant.TileSize.heigth), body.velocity.x, body.velocity.y, body._uniqueId);
    }
    collision_body.fromPhysicsBody = fromPhysicsBody;
    function fromPhysicsBodies(bodies) {
        return bodies.map(function (b) { return collisionBody(Math.round(b.x / constant.TileSize.width), Math.round(b.y / constant.TileSize.heigth), b.velocity.x, b.velocity.y, b._uniqueId); });
    }
    collision_body.fromPhysicsBodies = fromPhysicsBodies;
    function isEmptyTop(body, bodies) {
        var yLevelAbove = body.tile.y - 1;
        for (var i = 0; i < bodies.length; i++) {
            if (bodies[i].tile.y === yLevelAbove && bodies[i].tile.x === body.tile.x) {
                console.log("Body to test: ", body, ", body that matched:", bodies[i]);
                return false;
            }
        }
        return true;
    }
    collision_body.isEmptyTop = isEmptyTop;
})(collision_body || (collision_body = {}));
module.exports = collision_body;

},{"../utilities/constants":11}],9:[function(require,module,exports){
var constant = require("../utilities/constants");
var utilities = require("../utilities/utilities");
var world = require("../world/tiles");
var collisionBody = require("./collision-body");
function canClimb(body, tile) {
    var bodies = [].concat(collisionBody.fromPhysicsBodies(physics.physicsBodies)).concat(collisionBody.fromTiles(world.getAllTiles()));
    var aboveBody = collisionBody.isEmptyTop(collisionBody.fromPhysicsBody(body), bodies);
    var aboveTile = collisionBody.isEmptyTop(collisionBody.fromTile(tile), bodies);
    console.log("canClimb, above body empty", aboveBody, "above tile empty", aboveTile);
    return aboveBody && aboveTile;
}
function getAndResolveOverlappingTile() {
    if (utilities.isDirectionLeft(physics.currentlyMovingBody)) {
        return (function () {
            var x = Math.round(physics.currentlyMovingBody.x - physics.currentlyMovingBody.velocity.x);
            var y = Math.round(physics.currentlyMovingBody.y);
            var tile = world.map.getTileWorldXY(x, y, constant.TileSize.width, constant.TileSize.heigth, "collision");
            if (tile) {
                physics.currentlyMovingBody.x = (tile.x * constant.TileSize.width) + constant.TileSize.width;
            }
            return tile;
        })();
    }
    else if (utilities.isDirectionRight(physics.currentlyMovingBody)) {
        return (function () {
            var x = Math.round(physics.currentlyMovingBody.x + constant.TileSize.width + physics.currentlyMovingBody.velocity.x);
            var y = Math.round(physics.currentlyMovingBody.y);
            var tile = world.map.getTileWorldXY(x, y, constant.TileSize.width, constant.TileSize.heigth, "collision");
            if (tile) {
                physics.currentlyMovingBody.x = (tile.x * constant.TileSize.width) - constant.TileSize.width;
            }
            return tile;
        })();
    }
    else if (utilities.isDirectionDown(physics.currentlyMovingBody)) {
        return (function () {
            var x = Math.round(physics.currentlyMovingBody.x);
            var y = Math.round(physics.currentlyMovingBody.y + constant.TileSize.heigth + physics.currentlyMovingBody.velocity.y);
            var tile = world.map.getTileWorldXY(x, y, constant.TileSize.width, constant.TileSize.heigth, "collision");
            if (tile) {
                physics.currentlyMovingBody.y = (tile.y * constant.TileSize.heigth) - constant.TileSize.heigth;
            }
            return tile;
        })();
    }
    return undefined;
}
function move(game) {
    var tile = getAndResolveOverlappingTile();
    if (tile) {
        if (canClimb(physics.currentlyMovingBody, tile)) {
            console.log("CAN CLIMB AHOY! :D");
            physics.currentlyMovingBody.x = tile.x * constant.TileSize.width;
            physics.currentlyMovingBody.y = (tile.y - 1) * constant.TileSize.heigth;
        }
        console.log("overlap, stop");
        physics.stopCurrent();
    }
    physics.currentlyMovingBody.x += physics.currentlyMovingBody.velocity.x;
    physics.currentlyMovingBody.y += physics.currentlyMovingBody.velocity.y;
    if (!utilities.isDirectionDown(physics.currentlyMovingBody) && physics.currentlyMovingBody.tiledType === "PLAYER" && utilities.onNextPosition(physics.currentlyMovingBody)) {
        console.log("Next position reached - stop");
        physics.stopCurrent();
        physics.currentlyMovingBody.x = physics.currentlyMovingBody.next.x;
        physics.currentlyMovingBody.y = physics.currentlyMovingBody.next.y;
    }
    else if (!utilities.isDirectionDown(physics.currentlyMovingBody) && utilities.onNextPosition(physics.currentlyMovingBody)) {
        physics.currentlyMovingBody.x = physics.currentlyMovingBody.next.x;
        physics.currentlyMovingBody.y = physics.currentlyMovingBody.next.y;
        if (canFallTile(physics.currentlyMovingBody) && canFallBody(physics.currentlyMovingBody)) {
            console.log("Current body started falling..");
            physics.currentlyMovingBody.velocity.y = constant.Velocity * game.time.elapsed;
            physics.currentlyMovingBody.velocity.x = 0;
            physics.currentlyMovingBody.y += physics.currentlyMovingBody.velocity.y;
        }
        else {
            console.log("Calculating new next for body..");
            calculateNextForBody(physics.currentlyMovingBody);
        }
    }
}
function calculateNextForBody(body) {
    var targetCollisionBody = collisionBody.fromPhysicsBody(body);
    if (utilities.isDirectionRight(body)) {
        body.next.x = (targetCollisionBody.tile.x + 1) * constant.TileSize.width;
        body.next.y = targetCollisionBody.coordinates.y;
        console.log("Calculating next for body moving right..", (body.next.x / 32));
    }
    else if (utilities.isDirectionLeft(body)) {
        body.next.x = (targetCollisionBody.tile.x - 1) * constant.TileSize.width;
        body.next.y = targetCollisionBody.coordinates.y;
        console.log("Calculating next for body moving left..", body.next.x);
    }
}
function findFirstTileUnderBody(body) {
    var current = body ? body : physics.currentlyMovingBody;
    var x = Math.floor((current.x + constant.TileSize.width * 0.5) / constant.TileSize.width);
    var y = Math.floor(current.y / constant.TileSize.heigth);
    var tileY = recursiveFindFirstTileUnderBody(x, y + 1, 0) - 1;
    current.next.x = current.x;
    current.next.y = tileY * constant.TileSize.heigth;
}
function recursiveFindFirstTileUnderBody(x, y, recursion) {
    if (world.map.getTile(x, y, "collision")) {
        return y;
    }
    else if (recursion > 50) {
        return undefined;
    }
    return recursiveFindFirstTileUnderBody(x, y + 1, recursion + 1);
}
function checkCollision(targetBody) {
    if (!physics.currentlyMovingBody || targetBody._uniqueId === physics.currentlyMovingBody._uniqueId) {
        return false;
    }
    var current = collisionBody.fromPhysicsBody(physics.currentlyMovingBody);
    var target = collisionBody.fromPhysicsBody(targetBody);
    if (areBodiesOverlapping(current, target) && resolveCollision(physics.currentlyMovingBody, current, target)) {
        killBodies(physics.currentlyMovingBody, targetBody);
        return true;
    }
    return false;
}
function areBodiesOverlapping(current, target) {
    if (current.coordinates.y >= target.coordinates.y + target.heigth) {
        return false;
    }
    if (current.coordinates.y + current.heigth <= target.coordinates.y) {
        return false;
    }
    if (current.coordinates.x >= target.coordinates.x + target.width) {
        return false;
    }
    if (current.coordinates.x + current.width <= target.coordinates.x) {
        return false;
    }
    console.log("overlapping ", current, target);
    return true;
}
function killBodies(current, target) {
    if (current.tiledType === "PLAYER" || current.tiledType === "ICE") {
        if (target.tiledType === "FIRE") {
            current.isDead = true;
            target.isDead = current.tiledType === "ICE";
            console.log("FIRE FOUND", target.tiledType);
        }
    }
}
function resolveCollision(toResolve, toResolveCurrent, target) {
    if (toResolveCurrent._uniqueId === target._uniqueId || toResolve._uniqueId === target._uniqueId) {
        console.log("Unique ids match: ", toResolve, toResolveCurrent, target);
        return false;
    }
    if (utilities.isDirectionLeft(toResolve) && toResolveCurrent.tile.y === target.tile.y) {
        console.log("LLL X,Y -- X,Y:", toResolveCurrent.tile.x, ",", toResolveCurrent.tile.y, "--", target.tile.x, ",", target.tile.y);
        toResolve.x = target.coordinates.x + target.width;
        return true;
    }
    else if (utilities.isDirectionRight(toResolve) && toResolveCurrent.tile.y === target.tile.y) {
        console.log("RRR X,Y -- X,Y:", toResolveCurrent.tile.x, ",", toResolveCurrent.tile.y, "--", target.tile.x, ",", target.tile.y);
        toResolve.x = target.coordinates.x - target.width;
        return true;
    }
    else if (utilities.isDirectionDown(toResolve) && toResolveCurrent.tile.x === target.tile.x && toResolve.y + toResolveCurrent.heigth >= target.coordinates.y) {
        console.log("DDD X,Y -- X,Y:", toResolveCurrent.tile.x, ",", toResolveCurrent.tile.y, "--", target.tile.x, ",", target.tile.y);
        toResolve.y = target.coordinates.y - target.heigth;
        return true;
    }
    return false;
}
function getBodyBelow(body) {
    var isBodyUnder;
    var current = body ? body : physics.currentlyMovingBody;
    physics.physicsBodies.forEach(function (target) {
        if (isBodyUnder || current === target) {
            return;
        }
        var currentX = Math.round(current.x / constant.TileSize.width);
        var currentY = Math.round(current.y / constant.TileSize.heigth);
        var targetY = Math.round(target.y / constant.TileSize.heigth);
        var targetX = Math.round(target.x / constant.TileSize.width);
        if (currentY + 1 === targetY && currentX === targetX) {
            isBodyUnder = target;
        }
    });
    current.____isOnTopOfBody = isBodyUnder ? true : false;
    return isBodyUnder;
}
function findNewCurrentlyMovingBodyThroughGravity(game) {
    var newMovingBody;
    physics.physicsBodies.forEach(function (potentiallyFallingBody) {
        if (newMovingBody) {
            return;
        }
        var x = potentiallyFallingBody.x + (constant.TileSize.width / 2);
        var y = potentiallyFallingBody.y + (constant.TileSize.heigth * 1.5);
        var tile = world.map.getTileWorldXY(x, y, constant.TileSize.width, constant.TileSize.heigth, "collision");
        if (!tile && !getBodyBelow(potentiallyFallingBody)) {
            findFirstTileUnderBody(potentiallyFallingBody);
            newMovingBody = potentiallyFallingBody;
            console.log("Gravity pulls new body: " + newMovingBody._uniqueId);
            newMovingBody.velocity.x = 0;
            newMovingBody.velocity.y = constant.Velocity * game.time.elapsed;
        }
    });
    return newMovingBody;
}
;
function canFallTile(target) {
    var body = collisionBody.fromPhysicsBody(target);
    var tile = world.getTilePixelXY(body.coordinates.x, body.coordinates.y + constant.TileSize.heigth);
    var canFall = tile ? false : true;
    return canFall;
}
function canFallBody(current) {
    var body = collisionBody.fromPhysicsBody(current);
    var canFall = true;
    body.tile.y += 1;
    physics.physicsBodies.forEach(function (target) {
        var targetBody = collisionBody.fromPhysicsBody(target);
        if (body.tile.x === targetBody.tile.x && body.tile.y === targetBody.tile.y) {
            if (current.tiledType === "FIRE" && target.tiledType === "FIRE") {
                canFall = false;
            }
            else if (target.tiledType !== "FIRE") {
                canFall = false;
            }
        }
    });
    return canFall;
}
function pointInside(x, y, target) {
    var body = collisionBody.fromPhysicsBody(target);
    var rect = new Phaser.Rectangle(body.coordinates.x, body.coordinates.y, 32, 32);
    return Phaser.Rectangle.contains(rect, x, y);
}
function getIceBodiesGroupByY(iceBodies) {
    var groups = [];
    for (var y = 0; y < constant.TotalTilesY; y++) {
        var group = iceBodies.filter(function (i) { return collisionBody.fromPhysicsBody(i).tile.y === y; });
        if (group.length > 0) {
            groups.push(group);
        }
    }
    return groups;
}
function canFall(target) {
    if (canFallTile(target) && canFallBody(target)) {
        return true;
    }
    return false;
}
var physics;
(function (physics) {
    physics.currentlyMovingBody;
    physics.currentlyIceBodies = [];
    physics.physicsBodies = [];
    function killBody(body) {
        physics.physicsBodies = physics.physicsBodies.filter(function (b) { return b._uniqueId !== body._uniqueId; });
    }
    physics.killBody = killBody;
    function killBodies(bodies) {
        console.log("Current bodies:", physics.physicsBodies.length);
        physics.physicsBodies = physics.physicsBodies.filter(function (b) { return bodies.indexOf(b._uniqueId) === -1; });
        console.log("Current bodies after removal:", physics.physicsBodies.length);
    }
    physics.killBodies = killBodies;
    function stopCurrent() {
        if (!physics.currentlyMovingBody) {
            console.log("nothing to stop");
            return;
        }
        physics.currentlyMovingBody.velocity.x = physics.currentlyMovingBody.velocity.y = 0;
        console.log("stopped ", physics.currentlyMovingBody.tiledType, ", velocity: " + physics.currentlyMovingBody.velocity);
    }
    physics.stopCurrent = stopCurrent;
    function getBody(x, y) {
        var body;
        physics.physicsBodies.forEach(function (target) {
            if (!body && pointInside(x, y, target)) {
                body = target;
            }
        });
        return body;
    }
    physics.getBody = getBody;
    function stopCurrentAndSwap(newCurrentlyMovingBody) {
        physics.stopCurrent();
        physics.currentlyMovingBody = newCurrentlyMovingBody;
    }
    physics.stopCurrentAndSwap = stopCurrentAndSwap;
    function update(game) {
        physics.physicsBodies = utilities.sortIntoAscendingYOrder(physics.physicsBodies);
        if (physics.currentlyMovingBody) {
            move(game);
            if (!isMoving()) {
                physics.currentlyMovingBody = undefined;
            }
        }
        if (!physics.currentlyMovingBody && physics.currentlyIceBodies.length === 0) {
            var iceBodies = physics.physicsBodies.filter(function (b) { return b.tiledType === "ICE"; });
            var otherBodies = physics.physicsBodies.filter(function (b) { return b.tiledType !== "ICE"; });
            var iceGroups = getIceBodiesGroupByY(iceBodies);
            iceGroups.forEach(function (iceBodiesOnSameLevel) {
                if (iceBodiesOnSameLevel.every(canFall)) {
                    iceBodiesOnSameLevel.forEach(function (target) {
                        physics.stopCurrentAndSwap(target);
                        physics.currentlyMovingBody.velocity.y = constant.Velocity * game.time.elapsed;
                        physics.currentlyMovingBody.y += physics.currentlyMovingBody.velocity.y;
                        physics.currentlyMovingBody.velocity.x = 0;
                        console.log("I BODY FOUND : " + physics.currentlyMovingBody._uniqueId, physics.currentlyMovingBody.tiledType, physics.currentlyMovingBody.velocity);
                    });
                }
            });
            if (physics.currentlyIceBodies.length <= 0) {
                otherBodies.forEach(function (target) {
                    if (!physics.currentlyMovingBody && canFall(target)) {
                        physics.stopCurrentAndSwap(target);
                        physics.currentlyMovingBody.velocity.y = constant.Velocity * game.time.elapsed;
                        physics.currentlyMovingBody.y += physics.currentlyMovingBody.velocity.y;
                        physics.currentlyMovingBody.velocity.x = 0;
                        console.log("O BODY FOUND : " + physics.currentlyMovingBody._uniqueId, physics.currentlyMovingBody.tiledType, physics.currentlyMovingBody.velocity);
                    }
                });
            }
        }
        for (var index = 0; index < physics.physicsBodies.length; index++) {
            var targetBody = physics.physicsBodies[index];
            if (checkCollision(targetBody)) {
                console.log("Collision between body id's:", physics.currentlyMovingBody._uniqueId, targetBody._uniqueId);
                console.log("Current:", Math.round(physics.currentlyMovingBody.x / 32), ",", Math.round(physics.currentlyMovingBody.y / 32), physics.currentlyMovingBody._uniqueId);
                console.log("Target :", Math.round(targetBody.x / 32), ",", Math.round(targetBody.y / 32), targetBody._uniqueId);
                if (physics.currentlyMovingBody.tiledType === "PLAYER" && targetBody.tiledType === "ICE") {
                    targetBody.velocity.x = physics.currentlyMovingBody.velocity.x;
                    calculateNextForBody(targetBody);
                }
                physics.stopCurrentAndSwap(targetBody);
                console.log(physics.currentlyMovingBody.tiledType);
                return;
            }
        }
        if (physics.currentlyMovingBody && physics.currentlyMovingBody.isDead) {
            physics.currentlyMovingBody = undefined;
        }
    }
    physics.update = update;
    function isMoving(body) {
        var b = body ? body : physics.currentlyMovingBody;
        return utilities.isDirectionRight(b) || utilities.isDirectionLeft(b) || utilities.isDirectionDown(b) || b.velocity.y <= -constant.VelocityTreshold;
    }
    physics.isMoving = isMoving;
})(physics || (physics = {}));
module.exports = physics;

},{"../utilities/constants":11,"../utilities/utilities":12,"../world/tiles":13,"./collision-body":8}],10:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var constant = require("../utilities/constants");
var world = require("../world/tiles");
var physics = require("../physics/physics");
var input;
var isFacingLeft = true;
var constantAnimationSpeed = 8;
function setAnimationFrames() {
    if (physics.currentlyMovingBody && player.sprite.body._uniqueId !== physics.currentlyMovingBody._uniqueId) {
        return;
    }
    if (utilities.isDirectionLeft(player.sprite.body)) {
        player.sprite.animations.play("left", constantAnimationSpeed, true);
    }
    else if (utilities.isDirectionRight(player.sprite.body)) {
        player.sprite.animations.play("right", constantAnimationSpeed, true);
    }
    else if (utilities.isDirectionDown(player.sprite.body)) {
        if (isFacingLeft) {
            player.sprite.animations.play("fallingLeft", constantAnimationSpeed, true);
        }
        else {
            player.sprite.animations.play("fallingRight", constantAnimationSpeed, true);
        }
    }
    else {
        if (isFacingLeft) {
            player.sprite.animations.play("idleLeft", constantAnimationSpeed, true);
        }
        else {
            player.sprite.animations.play("idleRight", constantAnimationSpeed, true);
        }
    }
}
var player;
(function (player) {
    player.sprite;
    function init(game) {
        var start = utilities.createFromType("START", "entities", world.currentLevelJson);
        if (start.length <= 0) {
            throw "Could not load START entity from given map. Please make sure you have a start defined";
        }
        var x = utilities.floorToWorldTileCoordinate(start[0].x);
        var y = utilities.floorToWorldTileCoordinate(start[0].y);
        player.sprite = game.add.sprite(x, y, "player");
        game.physics.enable(player.sprite, Phaser.Physics.ARCADE);
        player.sprite.frame = 5;
        player.sprite.name = "PLAYER";
        player.sprite.body.tiledType = "PLAYER";
        player.sprite.body.velocity = new Phaser.Point(0, 0);
        player.sprite.body._uniqueId = utilities.getRunningId();
        player.sprite.body.next = new Phaser.Point(0, 0);
        player.sprite.body.previous = new Phaser.Point(0, 0);
        player.sprite.body.hasJustStarted = false;
        player.sprite.body.____isOnTopOfBody = false;
        player.sprite.body.isDead = false;
        player.sprite.animations.add("left", [9, 10, 11, 10]);
        player.sprite.animations.add("right", [0, 1, 2, 1]);
        player.sprite.animations.add("idleLeft", [14]);
        player.sprite.animations.add("idleRight", [5]);
        player.sprite.animations.add("fallingLeft", [15]);
        player.sprite.animations.add("fallingRight", [4]);
        player.sprite.animations.add("pushLeft", [9]);
        player.sprite.animations.add("pushRight", [2]);
        player.sprite.animations.add("death", [7]);
        physics.physicsBodies.push(player.sprite.body);
        input = game.input.keyboard.createCursorKeys();
    }
    player.init = init;
    function checkInputs(game) {
        if (physics.currentlyMovingBody) {
            setAnimationFrames();
            return;
        }
        var x;
        if (input.left.isDown) {
            console.log("left");
            x = player.sprite.body.x - (constant.TileSize.width / 2);
            player.sprite.body.velocity.x = constant.Velocity * game.time.elapsed * -1;
            player.sprite.body.velocity.y = 0;
            player.sprite.body.next.x = utilities.floorToWorldTileCoordinate(x);
            player.sprite.body.next.y = player.sprite.body.y;
            isFacingLeft = true;
        }
        else if (input.right.isDown) {
            console.log("right");
            player.sprite.body.velocity.x = constant.Velocity * game.time.elapsed;
            player.sprite.body.velocity.y = 0;
            player.sprite.body.next.x = utilities.floorToWorldTileCoordinate(player.sprite.body.x + (constant.TileSize.width * 1.5));
            player.sprite.body.next.y = player.sprite.body.y;
            isFacingLeft = false;
        }
        if (player.sprite.body.velocity.x >= constant.VelocityTreshold || player.sprite.body.velocity.x <= -constant.VelocityTreshold) {
            physics.currentlyMovingBody = player.sprite.body;
            player.sprite.body.hasJustStarted = true;
        }
        setAnimationFrames();
    }
    player.checkInputs = checkInputs;
    ;
    function death() {
        player.sprite.kill();
    }
    player.death = death;
    function update(game) {
        checkInputs(game);
        if (player.sprite.body.isDead) {
            physics.killBody(player.sprite.body);
            player.death();
            console.log("player death");
        }
    }
    player.update = update;
})(player || (player = {}));
module.exports = player;

},{"../physics/physics":9,"../utilities/constants":11,"../utilities/utilities":12,"../world/tiles":13}],11:[function(require,module,exports){
"use strict";
var constants;
(function (constants) {
    var levelsDirectory = "levels/";
    var imagesDirectory = "images/";
    constants.TotalTilesY = 14;
    constants.TotalTilesX = 16;
    constants.AssetDirectoryPath = "/assets/";
    constants.LevelsAssetDirectory = constants.AssetDirectoryPath + levelsDirectory;
    constants.ImagesAssetDirectory = constants.AssetDirectoryPath + imagesDirectory;
    constants.TileSize = { width: 32, heigth: 32 };
    constants.Velocity = 0.1;
    constants.VelocityTreshold = 0.25;
})(constants || (constants = {}));
;
module.exports = constants;

},{}],12:[function(require,module,exports){
var constant = require("./constants");
var world = require("../world/tiles");
var utilities;
(function (utilities) {
    var runningId = 0;
    function getRunningId() {
        runningId += 1;
        return runningId;
    }
    utilities.getRunningId = getRunningId;
    function sortIntoAscendingYOrder(physicsBodies) {
        return physicsBodies.sort(function (l, r) {
            if (l.y < r.y) {
                return 1;
            }
            else if (l.y > r.y) {
                return -1;
            }
            return 0;
        });
    }
    utilities.sortIntoAscendingYOrder = sortIntoAscendingYOrder;
    function floorToWorldTileCoordinate(value) {
        return Math.floor(value / constant.TileSize.width) * constant.TileSize.width;
    }
    utilities.floorToWorldTileCoordinate = floorToWorldTileCoordinate;
    function isDirectionLeft(body) {
        return body.velocity.x <= -constant.VelocityTreshold;
    }
    utilities.isDirectionLeft = isDirectionLeft;
    function isDirectionRight(body) {
        return body.velocity.x >= constant.VelocityTreshold;
    }
    utilities.isDirectionRight = isDirectionRight;
    function isDirectionDown(body) {
        return body.velocity.y >= constant.VelocityTreshold;
    }
    utilities.isDirectionDown = isDirectionDown;
    function onNextPosition(body) {
        if (body.velocity.x > 0) {
            return body.x >= body.next.x;
        }
        else if (body.velocity.x < 0) {
            return body.x <= body.next.x;
        }
        else if (body.velocity.y > 0) {
            return (body.y) >= body.next.y;
        }
        return false;
    }
    utilities.onNextPosition = onNextPosition;
    function image(imageName) {
        return constant.ImagesAssetDirectory + imageName;
    }
    utilities.image = image;
    ;
    function level(levelName) {
        return constant.LevelsAssetDirectory + levelName;
    }
    utilities.level = level;
    ;
    function createSprite(element, group) {
        var sprite = group.create(element.x, element.y, element.properties.sprite);
        Object.keys(element.properties).forEach(function (key) {
            sprite[key] = element.properties[key];
        });
    }
    utilities.createSprite = createSprite;
    ;
    function createFromType(type, layer, tiledMapJson) {
        var results = [];
        tiledMapJson.layers.forEach(function (tmpLayer) {
            if (tmpLayer.name === layer) {
                tmpLayer.objects.forEach(function (object) {
                    if (object.type === type) {
                        object.y -= constant.TileSize.heigth;
                        results.push(object);
                    }
                });
            }
        });
        return results;
    }
    utilities.createFromType = createFromType;
    ;
    function isInTresholdConstrain(pixelPositionOrVelocity, target) {
        return pixelPositionOrVelocity <= (target + constant.VelocityTreshold) && pixelPositionOrVelocity >= (target - constant.VelocityTreshold);
    }
    utilities.isInTresholdConstrain = isInTresholdConstrain;
    function fillSpriteGroup(spriteGroup, type, layer, frame, game) {
        createFromType(type, layer, world.currentLevelJson).forEach(function (obj) {
            var x = utilities.floorToWorldTileCoordinate(obj.x);
            var y = utilities.floorToWorldTileCoordinate(obj.y);
            var sprite = game.add.sprite(x, y, "items");
            game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.frame = frame;
            sprite.body.setSize(constant.TileSize.width, constant.TileSize.heigth);
            sprite.name = type;
            sprite.z = 1000;
            spriteGroup.add(sprite);
        });
    }
    utilities.fillSpriteGroup = fillSpriteGroup;
    ;
})(utilities || (utilities = {}));
;
module.exports = utilities;

},{"../world/tiles":13,"./constants":11}],13:[function(require,module,exports){
"use strict";
var constant = require("../utilities/constants");
var levels = {
    "1": {
        "1": {
            path: constant.LevelsAssetDirectory + "lvl1-1.debug.json",
            json: require("../../assets/levels/lvl1-1.debug.json")
        },
        "2": {
            path: constant.LevelsAssetDirectory + "lvl1-2.debug.json",
            json: require("../../assets/levels/lvl1-2.debug.json")
        }
    }
};
var tiles;
(function (tiles) {
    tiles.map;
    tiles.currentLevelJson;
    tiles.currentLevelJsonFile;
    tiles.world = 1;
    tiles.level = 1;
    tiles.layers = {};
    function loadLevel(game, world, level) {
        tiles.currentLevelJson = levels[world][level].json;
        game.load.tilemap("level", levels[world][level].path, null, Phaser.Tilemap.TILED_JSON);
    }
    tiles.loadLevel = loadLevel;
    function loadLayers(layers) {
        if (!tiles.map) {
            throw "Map not created.";
        }
        layers.forEach(function (layer) {
            tiles.layers[layer] = tiles.map.createLayer(layer);
            tiles.layers[layer].resizeWorld();
        });
        tiles.map.setCollisionBetween(1, 2000, true, "collision");
    }
    tiles.loadLayers = loadLayers;
    ;
    function getTilePixelXY(x, y) {
        return tiles.map.getTileWorldXY(x, y, constant.TileSize.width, constant.TileSize.heigth, "collision");
    }
    tiles.getTilePixelXY = getTilePixelXY;
    function getAllTiles() {
        var width = constant.TotalTilesX * constant.TileSize.width;
        var heigth = constant.TotalTilesY * constant.TileSize.heigth;
        var allCollisionTiles = tiles.layers["collision"].getTiles(0, 0, width, heigth, true);
        console.log("Found tiles", allCollisionTiles.length, "on collision tile layer");
        console.log(allCollisionTiles);
        return allCollisionTiles;
    }
    tiles.getAllTiles = getAllTiles;
})(tiles || (tiles = {}));
module.exports = tiles;

},{"../../assets/levels/lvl1-1.debug.json":1,"../../assets/levels/lvl1-2.debug.json":2,"../utilities/constants":11}]},{},[3,7]);
