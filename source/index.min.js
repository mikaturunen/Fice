(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={ "height":14,
 "layers":[
        {
         "data":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 10, 10, 10, 10, 12, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 20, 10, 10, 10, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 12, 10, 10, 10, 12, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 17, 10, 10, 10, 18, 10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         "height":14,
         "name":"background",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "data":[35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 3, 3, 2, 2, 2, 3, 2, 3, 35, 35, 34, 35, 35, 34, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 36, 0, 25, 27, 26, 26, 27, 27, 26, 35, 35, 35, 35, 35, 34, 35, 36, 0, 0, 0, 0, 0, 1, 3, 2, 35, 35, 35, 35, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 35, 34, 35, 35, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 33, 35, 34, 35, 35, 35, 34, 35, 27, 27, 26, 27, 28, 0, 0, 0, 33, 35, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 27, 27, 27, 35, 35, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 35, 35, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
         "height":14,
         "name":"collision",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":16,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "height":0,
         "name":"entities",
         "objects":[
                {
                 "gid":44,
                 "height":0,
                 "id":4,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":193,
                 "y":162
                }, 
                {
                 "gid":44,
                 "height":0,
                 "id":5,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":225,
                 "y":322
                }, 
                {
                 "gid":44,
                 "height":0,
                 "id":6,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":225,
                 "y":290
                }, 
                {
                 "gid":44,
                 "height":0,
                 "id":7,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"TARGET",
                 "visible":true,
                 "width":0,
                 "x":225,
                 "y":259
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":8,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":161.5,
                 "y":226.5
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":9,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":160,
                 "y":291
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":10,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":160,
                 "y":258.5
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":11,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":162,
                 "y":324
                }, 
                {
                 "gid":41,
                 "height":0,
                 "id":12,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"BLOCK",
                 "visible":true,
                 "width":0,
                 "x":259,
                 "y":163
                }, 
                {
                 "gid":55,
                 "height":0,
                 "id":13,
                 "name":"",
                 "properties":
                    {

                    },
                 "rotation":0,
                 "type":"START",
                 "visible":true,
                 "width":0,
                 "x":320,
                 "y":161
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "width":0,
         "x":0,
         "y":0
        }],
 "nextobjectid":14,
 "orientation":"orthogonal",
 "properties":
    {

    },
 "renderorder":"right-down",
 "tileheight":32,
 "tilesets":[
        {
         "firstgid":1,
         "image":"tiles.png",
         "imageheight":160,
         "imagewidth":256,
         "margin":0,
         "name":"tiles",
         "properties":
            {

            },
         "spacing":0,
         "tileheight":32,
         "tilewidth":32,
         "transparentcolor":"#ffffff"
        }, 
        {
         "firstgid":41,
         "image":"items.png",
         "imageheight":128,
         "imagewidth":128,
         "margin":0,
         "name":"items",
         "properties":
            {

            },
         "spacing":0,
         "tileheight":32,
         "tilewidth":32,
         "transparentcolor":"#ffffff"
        }],
 "tilewidth":32,
 "version":1,
 "width":16
}
},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
"use strict";
var player = require("../player/player");
var ice = require("../ice/ice");
var world = require("../world/tiles");
var constant = require("../utilities/constants");
var utilities = require("../utilities/utilities");
var physics = require("../physics/physics");
var game;
function preloadGame() {
    return function () {
        game.load.tilemap("level", utilities.level("lvl.json"), null, Phaser.Tilemap.TILED_JSON);
        game.load.image("tiles", utilities.image("tiles.png"));
        game.load.spritesheet("player", utilities.image("player-sheet.png"), constant.TileSize.width, constant.TileSize.heigth);
        game.load.spritesheet("items", utilities.image("items-sheet.png"), 30, constant.TileSize.heigth);
    };
}
function createGame() {
    return function () {
        game.stage.backgroundColor = "#787878";
        game.scale.pageAlignHorizontally = true;
        game.scale.pageAlignVertically = true;
        world.map = game.add.tilemap("level");
        world.map.addTilesetImage("tiles", "tiles");
        world.loadLayers(["background", "collision"]);
        player.init(game);
        ice.init(game);
    };
}
function updateGame() {
    return function () {
        player.update(game);
        ice.update(game);
        physics.update(game);
    };
}
function renderGame() {
    return function () {
        game.debug.text("Moving bodies  : " + physics.isMovingBodies, 10, 10);
        game.debug.text("Player movement: " + player.sprite.body.velocity.x, 10, 25);
        game.debug.text("Player y       : " + Math.round(player.sprite.body.y) + ",  " + Math.round(player.sprite.body.y / 32), 10, 40);
        game.debug.text("Player x       : " + Math.round(player.sprite.body.x) + ",  " + Math.round(player.sprite.body.x / 32), 10, 55);
        game.debug.text("__bodyUnder: " + player.sprite.body.____isOnTopOfBody, 300, 10);
    };
}
var gameworld;
(function (gameworld) {
    function init() {
        game = new Phaser.Game(16 * constant.TileSize.width, 14 * constant.TileSize.heigth, Phaser.AUTO, "FIce", {
            preload: preloadGame(),
            create: createGame(),
            update: updateGame(),
            render: renderGame()
        });
    }
    gameworld.init = init;
})(gameworld || (gameworld = {}));
module.exports = gameworld;

},{"../ice/ice":4,"../physics/physics":6,"../player/player":7,"../utilities/constants":8,"../utilities/utilities":9,"../world/tiles":10}],4:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var physics = require("../physics/physics");
var currentPosition = new Phaser.Point(0, 0);
var nextPosition = new Phaser.Point(0, 0);
var ice;
(function (ice) {
    ice.sprites;
    function init(game) {
        ice.sprites = game.add.group();
        utilities.fillSpriteGroup(ice.sprites, "BLOCK", "entities", 0, game);
        ice.sprites.children.forEach(function (sprite) {
            game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.name = "ICE";
            sprite.body.tiledType = "ICE";
            sprite.body.velocity = new Phaser.Point(0, 0);
            sprite.body.next = new Phaser.Point(0, 0);
            sprite.body.previous = new Phaser.Point(0, 0);
            physics.physicsBodies.push(sprite.body);
        });
    }
    ice.init = init;
    function update(game) {
    }
    ice.update = update;
})(ice || (ice = {}));
module.exports = ice;

},{"../physics/physics":6,"../utilities/utilities":9}],5:[function(require,module,exports){
"use strict";
var gameworld = require("./game/game");
gameworld.init();

},{"./game/game":3}],6:[function(require,module,exports){
var constant = require("../utilities/constants");
var utilities = require("../utilities/utilities");
var world = require("../world/tiles");
function isTileBlockingMovement(pixelCoordinateX, pixelCoordinateY) {
    return world.map.getTileWorldXY(pixelCoordinateX, pixelCoordinateY, constant.TileSize.width, constant.TileSize.heigth, "collision") ? true : false;
}
function isTileBlockingMovementVelocity(body) {
    return world.map.getTileWorldXY(body.x + body.velocity.x, body.y + body.velocity.y, constant.TileSize.width, constant.TileSize.heigth, "collision") ? true : false;
}
function isMoving(body) {
    return body.velocity.x >= constant.VelocityTreshold || body.velocity.x <= -constant.VelocityTreshold || body.velocity.y >= constant.VelocityTreshold || body.velocity.y <= -constant.VelocityTreshold;
}
function move(body) {
    if (isTileBlockingMovement(body.next.x, body.next.y)) {
        body.velocity.x = body.velocity.y = 0;
    }
    else if (body.tiledType !== "PLAYER" && isTileBlockingMovementVelocity(body)) {
        body.velocity.x = body.velocity.y = 0;
    }
    body.x += body.velocity.x;
    body.y += body.velocity.y;
    if (body.tiledType === "PLAYER" && utilities.onNextPosition(body)) {
        console.log("body reached position: ", body, body.next);
        body.velocity.x = body.velocity.y = 0;
        body.x = body.next.x;
        body.y = body.next.y;
    }
}
function findFirstTileUnderBody(body) {
    var x = Math.floor((body.x + constant.TileSize.width * 0.5) / constant.TileSize.width);
    var y = Math.floor(body.y / constant.TileSize.heigth);
    console.log("x, y: ", x, y + 1);
    var tileY = recursiveFindFirstTileUnderBody(x, y + 1);
    body.next.x = body.x;
    body.next.y = tileY * constant.TileSize.heigth;
    console.log("Set the tile coordinates to be: ", tileY, ", ", body.next.y);
}
function recursiveFindFirstTileUnderBody(x, y) {
    if (world.map.getTile(x, y, "collision")) {
        console.log("Tile found below body on Y:", y - 1);
        return y - 1;
    }
    return recursiveFindFirstTileUnderBody(x, y + 1);
}
function checkCollision(current, target) {
    var transferForce = false;
    var stopCurrent = false;
    if (current.tiledType === "PLAYER") {
        transferForce = true;
    }
    var currentX = Math.round(current.x / constant.TileSize.width);
    var currentY = Math.round(current.y / constant.TileSize.heigth);
    var currentLeft = currentX;
    var currentRight = currentX + 1;
    var currentTop = currentY - 1;
    var currentBottom = currentY + 1;
    var targetX = Math.round(target.x / constant.TileSize.width);
    var targetY = Math.round(target.y / constant.TileSize.heigth);
    if (current.velocity.x <= -constant.VelocityTreshold && currentLeft === targetX && currentY === targetY) {
        stopCurrent = true;
    }
    else if (current.velocity.x >= constant.VelocityTreshold && currentRight === targetX && currentY === targetY) {
        stopCurrent = true;
    }
    if (stopCurrent) {
        if (transferForce && current.hasJustStarted) {
            transferVelocity(current, target);
        }
        current.velocity.x = current.velocity.y = 0;
        return true;
    }
    return false;
}
function transferVelocity(current, target) {
    target.velocity.x = current.velocity.x;
    physics.isMovingBodies = true;
    var targetX = Math.round(target.x / constant.TileSize.width);
    var targetY = Math.round(target.y / constant.TileSize.heigth);
    target.next.y = target.y;
    if (target.velocity.x <= -constant.VelocityTreshold) {
        console.log("Force left -- ", current.velocity.x, target.velocity.x);
        target.next.x = Math.round((targetX - 1) * constant.TileSize.width);
    }
    else if (target.velocity.x >= constant.VelocityTreshold) {
        console.log("Force right -- ", current.velocity.x, target.velocity.x);
        target.next.x = Math.round((targetX + 1) * constant.TileSize.width);
    }
}
function anotherBodyUnder(current, index) {
    var isBodyUnder = false;
    physics.physicsBodies.forEach(function (target, targetIndex) {
        if (isBodyUnder || index === targetIndex) {
            return;
        }
        var currentX = Math.round(current.x / constant.TileSize.width);
        var currentY = Math.round(current.y / constant.TileSize.heigth);
        var targetY = Math.round(target.y / constant.TileSize.heigth);
        var targetX = Math.round(target.x / constant.TileSize.width);
        if (currentY + 1 === targetY && currentX === targetX) {
            isBodyUnder = true;
        }
    });
    current.____isOnTopOfBody = isBodyUnder;
    return isBodyUnder;
}
var physics;
(function (physics) {
    physics.isMovingBodies = false;
    physics.physicsBodies = [];
    function update(game) {
        if (!physics.isMovingBodies) {
            return;
        }
        var movingBodies = [];
        var readyBodiesIndices = [];
        physics.physicsBodies.forEach(function (body, index) {
            physics.physicsBodies.forEach(function (targetBody, targetIndex) {
                if (index === targetIndex || readyBodiesIndices.indexOf(body) !== -1) {
                    return;
                }
                if (checkCollision(body, targetBody)) {
                    readyBodiesIndices.push(targetBody);
                    console.log(body.tiledType, body.velocity.x, targetBody.tiledType, targetBody.velocity.x, targetIndex);
                }
            });
            move(body);
            if (isMoving(body)) {
                movingBodies.push(body);
            }
            else {
                var x = body.x + (constant.TileSize.width / 2);
                var y = body.y + (constant.TileSize.heigth * 1.5);
                var tile = world.map.getTileWorldXY(x, y, constant.TileSize.width, constant.TileSize.heigth, "collision");
                if (!tile && !anotherBodyUnder(body, index)) {
                    findFirstTileUnderBody(body);
                    body.velocity.x = 0;
                    body.velocity.y = constant.Velocity * game.time.elapsed;
                    movingBodies.push(body);
                }
            }
            body.hasJustStarted = false;
        });
        physics.isMovingBodies = movingBodies.length > 0;
    }
    physics.update = update;
})(physics || (physics = {}));
module.exports = physics;

},{"../utilities/constants":8,"../utilities/utilities":9,"../world/tiles":10}],7:[function(require,module,exports){
"use strict";
var utilities = require("../utilities/utilities");
var constant = require("../utilities/constants");
var physics = require("../physics/physics");
var currentPosition = new Phaser.Point(0, 0);
var nextPosition = new Phaser.Point(0, 0);
var input;
var player;
(function (player) {
    player.sprite;
    function init(game) {
        var start = utilities.createFromType("START", "entities", utilities.lvlJson);
        if (start.length <= 0) {
            throw "Could not load START entity from given map. Please make sure you have a start defined";
        }
        var x = utilities.floorToWorldTileCoordinate(start[0].x);
        var y = utilities.floorToWorldTileCoordinate(start[0].y);
        player.sprite = game.add.sprite(x, y, "player");
        game.physics.enable(player.sprite, Phaser.Physics.ARCADE);
        player.sprite.frame = 5;
        player.sprite.name = "PLAYER";
        player.sprite.body.tiledType = "PLAYER";
        player.sprite.body.velocity = new Phaser.Point(0, 0);
        player.sprite.body.next = new Phaser.Point(0, 0);
        player.sprite.body.previous = new Phaser.Point(0, 0);
        player.sprite.body.hasJustStarted = false;
        player.sprite.body.____isOnTopOfBody = false;
        physics.physicsBodies.push(player.sprite.body);
        input = game.input.keyboard.createCursorKeys();
    }
    player.init = init;
    function checkInputs(game) {
        if (physics.isMovingBodies) {
            return;
        }
        var x;
        if (input.left.isDown) {
            console.log("left");
            x = player.sprite.body.x - (constant.TileSize.width / 2);
            player.sprite.body.velocity.x = constant.Velocity * game.time.elapsed * -1;
            player.sprite.body.velocity.y = 0;
            player.sprite.body.next.x = utilities.floorToWorldTileCoordinate(x);
            player.sprite.body.next.y = player.sprite.body.y;
        }
        else if (input.right.isDown) {
            console.log("right");
            player.sprite.body.velocity.x = constant.Velocity * game.time.elapsed;
            player.sprite.body.velocity.y = 0;
            player.sprite.body.next.x = utilities.floorToWorldTileCoordinate(player.sprite.body.x + (constant.TileSize.width * 1.5));
            player.sprite.body.next.y = player.sprite.body.y;
        }
        if (player.sprite.body.velocity.x >= constant.VelocityTreshold || player.sprite.body.velocity.x <= -constant.VelocityTreshold) {
            physics.isMovingBodies = true;
            player.sprite.body.hasJustStarted = true;
        }
    }
    player.checkInputs = checkInputs;
    ;
    function death() {
        player.sprite.kill();
    }
    player.death = death;
    function update(game) {
        checkInputs(game);
    }
    player.update = update;
})(player || (player = {}));
module.exports = player;

},{"../physics/physics":6,"../utilities/constants":8,"../utilities/utilities":9}],8:[function(require,module,exports){
"use strict";
var constants;
(function (constants) {
    var levelsDirectory = "levels/";
    var imagesDirectory = "images/";
    constants.AssetDirectoryPath = "/assets/";
    constants.LevelsAssetDirectory = constants.AssetDirectoryPath + levelsDirectory;
    constants.ImagesAssetDirectory = constants.AssetDirectoryPath + imagesDirectory;
    constants.TileSize = { width: 32, heigth: 32 };
    constants.Velocity = 0.065;
    constants.VelocityTreshold = 0.25;
})(constants || (constants = {}));
;
module.exports = constants;

},{}],9:[function(require,module,exports){
var constant = require("./constants");
var utilities;
(function (utilities) {
    utilities.lvlJson = require("../../assets/levels/lvl.json");
    function floorToWorldTileCoordinate(value) {
        return Math.floor(value / constant.TileSize.width) * constant.TileSize.width;
    }
    utilities.floorToWorldTileCoordinate = floorToWorldTileCoordinate;
    function onNextPosition(body) {
        if (body.velocity.x > 0) {
            return body.x >= body.next.x;
        }
        else if (body.velocity.x < 0) {
            return body.x <= body.next.x;
        }
        else if (body.velocity.y > 0) {
            return (body.y) >= body.next.y;
        }
        return false;
    }
    utilities.onNextPosition = onNextPosition;
    function image(imageName) {
        return constant.ImagesAssetDirectory + imageName;
    }
    utilities.image = image;
    ;
    function level(levelName) {
        return constant.LevelsAssetDirectory + levelName;
    }
    utilities.level = level;
    ;
    function createSprite(element, group) {
        var sprite = group.create(element.x, element.y, element.properties.sprite);
        Object.keys(element.properties).forEach(function (key) {
            sprite[key] = element.properties[key];
        });
    }
    utilities.createSprite = createSprite;
    ;
    function createFromType(type, layer, tiledMapJson) {
        var results = [];
        tiledMapJson.layers.forEach(function (tmpLayer) {
            if (tmpLayer.name === layer) {
                tmpLayer.objects.forEach(function (object) {
                    if (object.type === type) {
                        object.y -= constant.TileSize.heigth;
                        results.push(object);
                    }
                });
            }
        });
        return results;
    }
    utilities.createFromType = createFromType;
    ;
    function fillSpriteGroup(spriteGroup, type, layer, frame, game) {
        createFromType(type, layer, utilities.lvlJson).forEach(function (obj) {
            var x = utilities.floorToWorldTileCoordinate(obj.x);
            var y = utilities.floorToWorldTileCoordinate(obj.y);
            var sprite = game.add.sprite(x, y, "items");
            game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.frame = frame;
            sprite.body.setSize(constant.TileSize.width, constant.TileSize.heigth);
            sprite.name = type;
            sprite.z = 1000;
            spriteGroup.add(sprite);
        });
    }
    utilities.fillSpriteGroup = fillSpriteGroup;
    ;
})(utilities || (utilities = {}));
;
module.exports = utilities;

},{"../../assets/levels/lvl.json":1,"./constants":8}],10:[function(require,module,exports){
"use strict";
var tiles;
(function (tiles) {
    tiles.map;
    tiles.layers = {};
    function loadLayers(layers) {
        if (!tiles.map) {
            throw "Map not created.";
        }
        layers.forEach(function (layer) {
            tiles.layers[layer] = tiles.map.createLayer(layer);
            tiles.layers[layer].resizeWorld();
        });
        tiles.map.setCollisionBetween(1, 2000, true, "collision");
    }
    tiles.loadLayers = loadLayers;
    ;
})(tiles || (tiles = {}));
module.exports = tiles;

},{}]},{},[2,5]);
