(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var phaserStorage = require("../utilities/phaser-storage");

var playerVelocity = 200;

// Creating cursos keys from Phaser
var keys = {
    cursors: phaserStorage.game.input.keyboard.createCursorKeys(),
    jump: phaserStorage.game.input.keyboard.addKey(Phaser.Keyboard.A),
    shoot: phaserStorage.game.input.keyboard.addKey(Phaser.Keyboard.S)
};

var create = function () {
    var game = phaserStorage.game;

    // Loading player sprite
    player.sprite = game.add.sprite(game.width / 2, // X
    10, // Y
    "player", // Sprite / sheet name
    0 // frame
    );

    // Giving all the loaded sprite objects arcade physics
    game.physics.arcade.enable(player.sprite);
    player.sprite.body.gravity.y = 1000;
    player.sprite.body.maxVelocity.y = 400;
    player.sprite.body.collideWorldBounds = true;

    createAnimations();
};

/**
 * Creates all the animations from the player sprite sheet for player movement.
 */
var createAnimations = function () {
    // Left direction
    player.sprite.animations.add("leftWalking", [0, 1, 2, 3], 10, true);
    player.sprite.animations.add("leftJumping", [], 10, true);
    player.sprite.animations.add("leftIdle", [], 10, true);
    player.sprite.animations.add("leftFalling", [], 10, true);

    // Right direction
    player.sprite.animations.add("rightWalking", [5, 6, 7, 8], 10, true);
    player.sprite.animations.add("rightJumping", [], 10, true);
    player.sprite.animations.add("rightIdle", [], 10, true);
    player.sprite.animations.add("rightFalling", [], 10, true);
};

var update = function () {
    checkInputs();
    setAnimations();
};

/**
 * Goes through the defined user inputs and manipulates the player velocity.
 */
var checkInputs = function () {
    player.sprite.body.velocity.x = 0;

    if (keys.cursors.left.isDown) {
        player.facing = "left";
        player.sprite.body.velocity.x = -playerVelocity;
    } else if (keys.cursors.right.isDown) {
        player.facing = "right";
        player.sprite.body.velocity.x = playerVelocity;
    }

    if (keys.jump.isDown && player.sprite.body.velocity.y >= 0) {
        player.sprite.body.velocity.y = -500;
    } else if (!keys.jump.isDown && player.sprite.body.velocity.y < -1) {
        player.sprite.body.velocity.y = 0;
    }
};

/**
 * Sets the player into a N animation series.
 */
var setAnimations = function () {
    trySettingAnimationJumping();
    trySettingAnimationFalling();
    trySettingAnimationWalking();
    trySettingAnimationStanding();
};

var trySettingAnimationJumping = function () {
    if (player.sprite.body.velocity.y < 0) {
        // Jumping
        if (player.facing === "left") {
            player.sprite.animations.play("leftJumping");
        } else {
            player.sprite.animations.play("rightJumping");
        }
    }
};

var trySettingAnimationFalling = function () {
    if (player.sprite.body.velocity.y > 0) {
        // Falling
        if (player.facing === "left") {
            player.sprite.animations.play("leftFalling");
        } else {
            player.sprite.animations.play("rightFalling");
        }
    }
};

var trySettingAnimationWalking = function () {
    if (player.sprite.body.velocity.y === 0 && player.sprite.body.velocity.x !== 0) {
        // Walking left
        if (player.facing === "left") {
            player.sprite.animations.play("leftWalking");
        } else {
            player.sprite.animations.play("rightWalking");
        }
    }
};

var trySettingAnimationStanding = function () {
    if (player.sprite.body.velocity.y === 0 && player.sprite.body.velocity.x === 0) {
        // Start idle timer
        player.idleTime = phaserStorage.game.time.now;

        // Walking left
        if (player.facing === "left") {
            player.sprite.animations.play("leftIdle");
        } else {
            player.sprite.animations.play("rightIdle");
        }
    }
};

/**
 * Player entity
 */
var player = {
    /**
     * Player Sprite object.
     * @type {Phaser.Sprite}
     */
    sprite: undefined,

    /**
     * What direction the player is facing currently.
     * @type {string}
     */
    facing: "right",

    /**
     * How long the player has been standing idle - will be mainly used for idle animation sequences. Unit: milliseconds.
     * @type {number}
     */
    idleTime: 0,

    /**
     * Creates the player entity.
     * @type {Function}
     */
    create: create,

    /**
     * Update handler for Player
     * @type {Function}
     */
    update: update
};

module.exports = player;

},{"../utilities/phaser-storage":8}],2:[function(require,module,exports){
"use strict";

var phaserStorage = require("../utilities/phaser-storage");

/**
 * Create function for Phaser.a
 * @return {Function} Function that can be called to execute the actual create functionality for Phaser.
 */
var create = function () {
    var game = phaserStorage.game;
    // Start the physics system in Phaser, especially with the ARCADE settings
    game.physics.startSystem(Phaser.Physics.ARCADE);

    // Loading the player
    var player = require("../entities/player");
    player.create();
};

console.log("Create in place.");
module.exports = create;

},{"../entities/player":1,"../utilities/phaser-storage":8}],3:[function(require,module,exports){
"use strict";

var phaserStorage = require("../utilities/phaser-storage");

// Wrapping the callback into a anon function so that the phaserStorage.game object is properly in place  - magic!
var preload = function () {
    return function () {
        return require("./preload")();
    };
};
var create = function () {
    return function () {
        return require("./create")();
    };
};
var update = function () {
    return function () {
        return require("./update")();
    };
};
var render = function () {
    return function () {
        return require("./render")();
    };
};

/**
 * The game module itself that manages the whole game as one.
 * @module game
 */
var game = {
    /**
     * Initializes the engine and starts the game
     * @return {[type]} [description]
     */
    start: function () {
        phaserStorage.game = new Phaser.Game(450, 600, Phaser.CANVAS, "FIce", {
            preload: preload(),
            create: create(),
            update: update(),
            render: render()
        });
    }
};

module.exports = game;

},{"../utilities/phaser-storage":8,"./create":2,"./preload":4,"./render":5,"./update":6}],4:[function(require,module,exports){
"use strict";

var phaserStorage = require("../utilities/phaser-storage");

var preload = function () {
    // Load all associated sprite sheets
    phaserStorage.game.load.spritesheet("player", "/assets/images/player-sheet.png", 32, 32);

    console.log("Loaded all assets into Phaser.");
};

console.log("Preload in place.");
module.exports = preload;

},{"../utilities/phaser-storage":8}],5:[function(require,module,exports){
"use strict";

var phaserStorage = require("../utilities/phaser-storage");
var player = require("../entities/player");

var render = function () {
    var game = phaserStorage.game;
    game.debug.body(player.sprite);
};

console.log("Render in place.");
module.exports = render;

},{"../entities/player":1,"../utilities/phaser-storage":8}],6:[function(require,module,exports){
"use strict";

var phaserStorage = require("../utilities/phaser-storage");
var player = require("../entities/player");

var update = function () {
    player.update();
};

console.log("Update in place.");
module.exports = update;

},{"../entities/player":1,"../utilities/phaser-storage":8}],7:[function(require,module,exports){
"use strict";

var game = require("./game/game");
game.start();

},{"./game/game":3}],8:[function(require,module,exports){
"use strict";

/**
 * Stores many of the common functionality used by Phaser, such as the Game object.
 * Phasers implementation assumes the formal client-side JavaScript approach and I'm working with the node style 
 * of module format here and I don't want to pollute the clients global JS namespace.
 * 
 * @module PhaserStorage
 */
var phaserStorage = {
  /** {Phaser.Game} Phasers game object stored in common place were all that need to use it can easily access it */
  game: undefined,

  gravity: 200
};

module.exports = phaserStorage;

},{}]},{},[7]);
